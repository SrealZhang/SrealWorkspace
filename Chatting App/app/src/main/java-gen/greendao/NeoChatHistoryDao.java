package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEO_CHAT_HISTORY".
*/
public class NeoChatHistoryDao extends AbstractDao<NeoChatHistory, Long> {

    public static final String TABLENAME = "NEO_CHAT_HISTORY";

    /**
     * Properties of entity NeoChatHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MyJID = new Property(1, String.class, "myJID", false, "MY_JID");
        public final static Property FriendJID = new Property(2, String.class, "friendJID", false, "FRIEND_JID");
        public final static Property Time = new Property(3, Long.class, "time", false, "TIME");
        public final static Property SendState = new Property(4, Integer.class, "sendState", false, "SEND_STATE");
        public final static Property Body = new Property(5, String.class, "body", false, "BODY");
        public final static Property IsSend = new Property(6, Boolean.class, "isSend", false, "IS_SEND");
    };


    public NeoChatHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public NeoChatHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEO_CHAT_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MY_JID\" TEXT," + // 1: myJID
                "\"FRIEND_JID\" TEXT," + // 2: friendJID
                "\"TIME\" INTEGER," + // 3: time
                "\"SEND_STATE\" INTEGER," + // 4: sendState
                "\"BODY\" TEXT," + // 5: body
                "\"IS_SEND\" INTEGER);"); // 6: isSend
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEO_CHAT_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NeoChatHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String myJID = entity.getMyJID();
        if (myJID != null) {
            stmt.bindString(2, myJID);
        }
 
        String friendJID = entity.getFriendJID();
        if (friendJID != null) {
            stmt.bindString(3, friendJID);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        Integer sendState = entity.getSendState();
        if (sendState != null) {
            stmt.bindLong(5, sendState);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(6, body);
        }
 
        Boolean isSend = entity.getIsSend();
        if (isSend != null) {
            stmt.bindLong(7, isSend ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NeoChatHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String myJID = entity.getMyJID();
        if (myJID != null) {
            stmt.bindString(2, myJID);
        }
 
        String friendJID = entity.getFriendJID();
        if (friendJID != null) {
            stmt.bindString(3, friendJID);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        Integer sendState = entity.getSendState();
        if (sendState != null) {
            stmt.bindLong(5, sendState);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(6, body);
        }
 
        Boolean isSend = entity.getIsSend();
        if (isSend != null) {
            stmt.bindLong(7, isSend ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NeoChatHistory readEntity(Cursor cursor, int offset) {
        NeoChatHistory entity = new NeoChatHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // myJID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // friendJID
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sendState
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // body
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isSend
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NeoChatHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMyJID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFriendJID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSendState(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBody(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsSend(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NeoChatHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NeoChatHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
